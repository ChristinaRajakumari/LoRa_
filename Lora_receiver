#include <SPI.h>
#include <LoRa.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>

// Pin Definitions
#define GPS_RX 4  // GPS TX ‚Üí Arduino D4
#define GPS_TX 3  // GPS RX ‚Üí Arduino D3
#define LORA_CS 10
#define LORA_RST 9
#define LORA_IRQ 2

// Initialize GPS & LoRa
SoftwareSerial gpsSerial(GPS_RX, GPS_TX);
TinyGPSPlus gps;

// Function to Get GPS Location
void getGPSLocation(float &lat, float &lng) {
    while (gpsSerial.available()) {
        gps.encode(gpsSerial.read());
        if (gps.location.isUpdated()) {
            lat = gps.location.lat();
            lng = gps.location.lng();
            Serial.print("üìç Latitude: "); Serial.print(lat, 6);
            Serial.print(" | Longitude: "); Serial.println(lng, 6);
        }
    }
}

// Function to Send Data via LoRa
void sendLoRaMessage(float lat, float lng) {
    Serial.println("üöÄ Sending GPS Location via LoRa...");
    LoRa.beginPacket();
    LoRa.print("Latitude: ");
    LoRa.print(lat, 6);
    LoRa.print(", Longitude: ");
    LoRa.print(lng, 6);
    LoRa.endPacket();
    Serial.println("‚úÖ Data Sent!");
}

void setup() {
    Serial.begin(9600);
    gpsSerial.begin(9600);

    // Initialize LoRa
    SPI.begin();
    LoRa.setPins(LORA_CS, LORA_RST, LORA_IRQ);
    if (!LoRa.begin(433E6)) {  // Change frequency if needed (433 MHz for EU, 915 MHz for US)
        Serial.println("‚ö† LoRa Init Failed!");
        while (1);
    }
    Serial.println("‚úÖ LoRa Ready!");
}

void loop() {
    float latitude = 0.0, longitude = 0.0;
    getGPSLocation(latitude, longitude);

    // Wait for User Input in Serial Monitor
    Serial.println("üîπ Press 'Enter' in Serial Monitor to Transmit Location...");
    while (!Serial.available());  // Wait for input
    Serial.read();  // Clear Serial Buffer

    // Transmit Data via LoRa
    sendLoRaMessage(latitude, longitude);
    delay(5000);  // Small delay before next¬†transmission
}
